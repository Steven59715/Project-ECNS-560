# Add new columns with log-transformed values to the clean_data_PR dataset
clean_data = clean_data |>
mutate(
# Create a new column "LOG_HOUSING_PRICE" by applying the natural log to "HOUSING_PRICE"
LOG_HOUSING_PRICE = log(HOUSING_PRICE),
# Create a new column "LOG_MIGRATION" by applying the natural log to "MIGRATION"
LOG_MIGRATION = log(MIGRATION)
)
# Fit a simple linear regression model
# LOG_HOUSING_PRICE is the dependent variable (outcome).
# LOG_MIGRATION is the independent variable (predictor).
simple_reg= lm(LOG_HOUSING_PRICE~ LOG_MIGRATION, data=clean_data)
# Summarize the regression model results in a tidy format
tidy(simple_reg)
# Fit a fixed-effects regression model using plm
fix_reg = plm(
LOG_HOUSING_PRICE ~ LOG_MIGRATION,
# Specifies the panel data structure: "STATEPOSTAL" as cross-sectional index and "YEAR" as time index
index = c("STATEPOSTAL", "YEAR"),
# Use the "within" model for fixed-effects estimation
model = "within",
# specifies the dataset containing the variables
data=clean_data
)
# Summarize the regression model results in a tidy format
tidy(fix_reg)
fix_reg_control = plm(
LOG_HOUSING_PRICE ~ LOG_MIGRATION + AvePR,
#Defines the panel data structure (STATEPOSTAL for states, YEAR for time periods)
index = c("STATEPOSTAL", "YEAR"),
#Specifies a fixed-effects model
model = "within",
#Specifies the dataset containing the variables for the analysis
data=clean_data
)
# Summarize the regression results in a tidy format
tidy(fix_reg_control)
# Generate a formatted regression table
stargazer(
#The regression model object from plm
fix_reg_control,
#Specifies the output format
type = "html",
#Title for the regression table
title = "Regression Output",
#Custom label for the dependent variable in the output table
ep.var.labels = "Log of Housing Price",
#Custom labels for the independent variables
covariate.labels = c("Log of Migration", "Average Prime Rate"),
digits = 3
)
#load libraries used
library(tidyverse)
library(stringr)
library(readr)
library(readxl)
library(dplyr)
library(skimr)
library(binsreg)
library(splines)
library(sf)
library(estimatr)
library(fixest)
library(viridisLite)
library(plm)
library(broom)
library(stargazer)
library(gridExtra)
knitr::opts_chunk$set(echo = F, message = FALSE, warning = FALSE, results = 'hide')
knitr::opts_chunk$set(echo = TRUE, warning = F)
load("C:/Users/attaa/OneDrive/Desktop/r/Project-ECNS-560/Cleaned Data/clean_data_PR.RData")
clean_data = clean_data_PR
library(plm)
library(estimatr)
library(tidyverse)
library(dplyr)
library(broom)
library(stargazer)
knitr::opts_chunk$set(echo = TRUE, warning = F)
# Rename columns in the clean_data dataset
clean_data = clean_data|>
rename(
# Rename the column "VALUE" to "HOUSING_PRICE"
HOUSING_PRICE = VALUE,
# Rename the column "NO_OF_INDIVIDUALS(INFLOW)" to "MIGRATION"
MIGRATION = `NO_OF_INDIVIDUALS(INFLOW)`
)
# Add new columns with log-transformed values to the clean_data_PR dataset
clean_data = clean_data |>
mutate(
# Create a new column "LOG_HOUSING_PRICE" by applying the natural log to "HOUSING_PRICE"
LOG_HOUSING_PRICE = log(HOUSING_PRICE),
# Create a new column "LOG_MIGRATION" by applying the natural log to "MIGRATION"
LOG_MIGRATION = log(MIGRATION)
)
# Fit a simple linear regression model
# LOG_HOUSING_PRICE is the dependent variable (outcome).
# LOG_MIGRATION is the independent variable (predictor).
simple_reg= lm(LOG_HOUSING_PRICE~ LOG_MIGRATION, data=clean_data)
# Summarize the regression model results in a tidy format
tidy(simple_reg)
# Fit a fixed-effects regression model using plm
fix_reg = plm(
LOG_HOUSING_PRICE ~ LOG_MIGRATION,
# Specifies the panel data structure: "STATEPOSTAL" as cross-sectional index and "YEAR" as time index
index = c("STATEPOSTAL", "YEAR"),
# Use the "within" model for fixed-effects estimation
model = "within",
# specifies the dataset containing the variables
data=clean_data
)
# Summarize the regression model results in a tidy format
tidy(fix_reg)
fix_reg_control = plm(
LOG_HOUSING_PRICE ~ LOG_MIGRATION + AvePR,
#Defines the panel data structure (STATEPOSTAL for states, YEAR for time periods)
index = c("STATEPOSTAL", "YEAR"),
#Specifies a fixed-effects model
model = "within",
#Specifies the dataset containing the variables for the analysis
data=clean_data
)
# Summarize the regression results in a tidy format
tidy(fix_reg_control)
# Generate a formatted regression table
stargazer(
#The regression model object from plm
fix_reg_control,
#Specifies the output format
type = "text",
#Title for the regression table
title = "Regression Output",
#Custom label for the dependent variable in the output table
ep.var.labels = "Log of Housing Price",
#Custom labels for the independent variables
covariate.labels = c("Log of Migration", "Average Prime Rate"),
digits = 3
)
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(plm)
library(estimatr)
library(tidyverse)
library(dplyr)
library(broom)
library(stargazer)
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(plm)
library(estimatr)
library(tidyverse)
library(dplyr)
library(broom)
library(stargazer)
load("C:/Users/attaa/OneDrive/Desktop/r/Project-ECNS-560/Cleaned Data/clean_data_PR.RData")
clean_data=clean_data_PR
# Rename columns in the clean_data_PR dataset
clean_data = clean_data|>
rename(
# Rename the column "VALUE" to "HOUSING_PRICE"
HOUSING_PRICE = VALUE,
# Rename the column "NO_OF_INDIVIDUALS(INFLOW)" to "MIGRATION"
MIGRATION = `NO_OF_INDIVIDUALS(INFLOW)`
)
# Add new columns with log-transformed values to the clean_data_PR dataset
clean_data = clean_data |>
mutate(
# Create a new column "LOG_HOUSING_PRICE" by applying the natural log to "HOUSING_PRICE"
LOG_HOUSING_PRICE = log(HOUSING_PRICE),
# Create a new column "LOG_MIGRATION" by applying the natural log to "MIGRATION"
LOG_MIGRATION = log(MIGRATION)
)
# Fit a simple linear regression model
# LOG_HOUSING_PRICE is the dependent variable (outcome).
# LOG_MIGRATION is the independent variable (predictor).
simple_reg= lm(LOG_HOUSING_PRICE~ LOG_MIGRATION, data=clean_data)
# Summarize the regression model results in a tidy format
tidy(simple_reg)
# Fit a fixed-effects regression model using plm
fix_reg = plm(
LOG_HOUSING_PRICE ~ LOG_MIGRATION,
# Specifies the panel data structure: "STATEPOSTAL" as cross-sectional index and "YEAR" as time index
index = c("STATEPOSTAL", "YEAR"),
# Use the "within" model for fixed-effects estimation
model = "within",
# specifies the dataset containing the variables
data=clean_data
)
# Summarize the regression model results in a tidy format
tidy(fix_reg)
fix_reg_control = plm(
LOG_HOUSING_PRICE ~ LOG_MIGRATION + AvePR,
#Defines the panel data structure (STATEPOSTAL for states, YEAR for time periods)
index = c("STATEPOSTAL", "YEAR"),
#Specifies a fixed-effects model
model = "within",
#Specifies the dataset containing the variables for the analysis
data=clean_data
)
# Summarize the regression results in a tidy format
tidy(fix_reg_control)
# Generate a formatted regression table
stargazer(
#The regression model object from plm
fix_reg_control,
#Specifies the output format
type = "text",
#Title for the regression table
title = "Regression Output",
#Custom label for the dependent variable in the output table
ep.var.labels = "Log of Housing Price",
#Custom labels for the independent variables
covariate.labels = c("Log of Migration", "Average Prime Rate"),
digits = 3
)
knitr::opts_chunk$set(echo = TRUE)
load("C:/Users/attaa/OneDrive/Desktop/r/Project-ECNS-560/Cleaned Data/clean_data_PR.RData")
knitr::opts_chunk$set(echo = TRUE)
load("C:/Users/attaa/OneDrive/Desktop/r/Project-ECNS-560/Cleaned Data/clean_data_PR.RData")
tracts = st_read("C:/Users/attaa/OneDrive/Desktop/GitHub/course-materials/lecture-slides/16-Spatial/data/census/tracts_acs_sdf_ac.json")
school= read_csv("C:/Users/attaa/OneDrive/Desktop/GitHub/course-materials/lecture-slides/16-Spatial/data/alco_schools.csv")
View(school)
wgs84 = 4326
schools= read_csv("C:/Users/attaa/OneDrive/Desktop/GitHub/course-materials/lecture-slides/16-Spatial/data/alco_schools.csv")|>
st_as_sf(coords = c("X","Y"), crs=wgs84)
tm_shape(tracts)+tm_polygons(col = "skyblue")+
tm_shape(schools)+ tm_dots()
knitr::opts_chunk$set(echo = TRUE, warning = F)
library(tidyverse)
library(nycflights13)
library(tictoc)
library(dbplyr)
library(DBI)
library(RSQLite)
lite_con=dbConnect(SQLite(), path= ":memory:")
library(tidyverse)
library(nycflights13)
library(tictoc)
library(dbplyr)
library(DBI)
library(RSQLite)
library(tidyverse)
library(nycflights13)
library(tictoc)
library(dbplyr)
library(DBI)
library(RSQLite)
lite_con=dbConnect(SQLite(), path= ":memory:")
copy_to(
dest = lite_con,
df= flights,
name = "flights",
temporary= F,
indexes = list(c("year", "month", "day"), "carrier", "tailnum","dest")
)
flights_db = tbl(lite_con, "flights")
class(flights_db)
head(flights_db)
flights_db|> select(year:day,dep_delay, arr_delay)
flights_db|>filter(dep_delay > 240)
flights_db|>
group_by(dest)|>
summarize(delay= mean(dep_delay))
tic()
tailnum_delay_db=flights_db|>
group_by(tailnum)|>
summarize(mean_delay= mean(dep_delay))|>
arrange(desc(mean_delay))
toc()
tic()
head(tailnum_delay_db)
toc()
tailnum_delay_db = tailnum_delay_db|>collect()
class(tailnum_delay_db)
hist(tailnum_delay_db$mean_delay)
tailnum_delay_db|>show_query()
tailnum_delay_db|>show_query()
tailnum_delay_db|>show_query()
flights_db|>
filter(dep_delay > 240)|>
head(5)|>
show_query()
query = "SELECT* FROM flights WHERE dep_delay > 240 LIMIT 5"
dbGetQuery(lite_con,query)
dbListTables(lite_con)
dbListFields(lite_con,"flights")
flights_db |>
select(distance,air_time)|>
mutate(speed= distance/(air_time/60))
query = "SELECT* distance, air_time, distance / (air_time / 60) AS speed FROM flights"
copy_to(
dest = lite_con,
df= nycflights13::weather,
name = "weather",
temporary= F,
indexes = list(c("year", "month", "day", "hour"))
)
View(tailnum_delay_db)
knitr::opts_chunk$set(echo = F, message = FALSE, warning = FALSE, results = 'hide')
#load libraries used
library(tidyverse)
library(stringr)
library(readr)
library(readxl)
library(dplyr)
library(skimr)
library(binsreg)
library(splines)
library(sf)
library(estimatr)
library(fixest)
library(viridisLite)
library(plm)
library(broom)
library(stargazer)
library(gridExtra)
# Loading the data
# working directory needs to be set to the GitHub folder for the project
# load was not working with relative address, had to make it a full path name address
load("C:/Users/attaa/OneDrive/Desktop/r/Project-ECNS-560/Cleaned Data/clean_data_PR.RData")
clean_data = clean_data_PR  #The code below uses "clean_data" as the data frame name
# Apply log transformation to VALUE and NO_OF_INDIVIDUALS(INFLOW) to create new log-transformed variables
clean_data$LOG_VALUE = log(clean_data$VALUE + 1)
clean_data$LOG_MIGRATION = log(clean_data$`NO_OF_INDIVIDUALS(INFLOW)` + 1)
# Create a scatter plot of LOG_MIGRATION vs. LOG_VALUE with a smoothing line
ggplot(clean_data, aes(x=LOG_MIGRATION, y =LOG_VALUE)) +
# Add points with low transparent
geom_point(alpha = 0.1)+
labs(title = "Immigration and Housing Prices Relationship", x="Migration (Log Transformed)", y = "Housing Prices (Log Transformed)") +
# Add a smooth line to show trend
geom_smooth()
# Plot LOG_MIGRATION over YEAR for each county, with points colored by county name
Top_Immigration = clean_data |>
group_by(Y1_COUNTYNAME.x) |>
summarise(mean_value = mean(`NO_OF_INDIVIDUALS(INFLOW)`, na.rm = T))|>  # Calculate the mean of migration for each county, excluding NA values
arrange(desc(mean_value))|> # Arrange counties in descending order of mean_value
# Select the top 10 counties with the highest mean_value
top_n(10,mean_value)
# Filters the original data to only include top counties
filtered_counties= clean_data|>
filter(Y1_COUNTYNAME.x %in% Top_Immigration$Y1_COUNTYNAME.x)
# Find top ten counties for house prices
top_counties_prices = clean_data |>
group_by(Y1_COUNTYNAME.x)|># Group data by county name
summarise(mean_value = mean(VALUE, na.rm = T))|> # # Calculate the mean of housing prices for each county, excluding NA values
arrange(desc(mean_value))|> # Arrange counties in descending order of mean_value
# Select the top 10 counties with the highest mean_value
top_n(10,mean_value)
# Filters the original data to only include top counties
filtered_counties= clean_data|>
filter(Y1_COUNTYNAME.x %in% top_counties_prices$Y1_COUNTYNAME.x) |>
filter(STATEPOSTAL != "GA")  # Keep only Harris County, TX
# Plot Housing Prices (VALUE) over YEAR for each county, with points colored by county name
plot1 = ggplot(filtered_counties, aes(x = YEAR, y = VALUE,
# Define grouping by county
group = Y1_COUNTYNAME.x,
# Set color by county name to differentiate points by county
color = Y1_COUNTYNAME.x)) +
#Add points to represent housing prices at each YEAR
geom_point(size = 1.5) + geom_line(size = 1.2) +
scale_color_viridis_d(option = "viridis") + theme_minimal() +
labs(title = "Trend of Housing Prices by Year, Top 10 Counties", x = "YEAR", y = "Housing Prices", color = "County")
plot2 = ggplot(filtered_counties, aes(x = YEAR, y = `NO_OF_INDIVIDUALS(INFLOW)`,
# Define grouping by county
group = Y1_COUNTYNAME.x,
# Set color by county name to differentiate points by county
color = Y1_COUNTYNAME.x)) +
#Add points to represent migration at each YEAR
geom_point(size = 1.5) + geom_line(size = 1.2) +
scale_color_viridis_d(option = "viridis") + theme_minimal() +
labs(title = "Top 10 Counties for Migration by Year, Top 10 Counties", x = "YEAR", y = "Migration", color = "County")
grid.arrange(plot1, plot2, ncol = 2)
# Find the top 10 counties with the highest mean of housing prices
top_counties = clean_data |>
group_by(Y1_COUNTYNAME.x)|># Group data by county name
summarise(mean_value = mean(LOG_VALUE, na.rm = T))|> # # Calculate the mean of housing prices for each county, excluding NA values
arrange(desc(mean_value))|> # Arrange counties in descending order of mean_value
# Select the top 10 counties with the highest mean_value
top_n(10,mean_value)
# Filters the original data to only include top counties
filtered_counties= clean_data|>
filter(Y1_COUNTYNAME.x %in% top_counties$Y1_COUNTYNAME.x)
# Box plot for top counties
plot3 = ggplot(filtered_counties, aes(x = reorder(Y1_COUNTYNAME.x, -LOG_VALUE), y = LOG_VALUE)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Box Plot of Housing Prices for Top 10 Counties", x = "County", y = "Housing Prices (Log Transformed)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the top ten states based of mean of VALUE
# Find the top 10 counties with the highest mean of inflow (migration)
top2_counties = clean_data |>
group_by(Y1_COUNTYNAME.x)|># Group data by county name
summarise(mean_value = mean(LOG_MIGRATION, na.rm = T))|> # Calculate the mean of migration (inflow) for each county, excluding NA values
arrange(desc(mean_value))|> # Arrange counties in descending order of mean_value
#Select the top 10 counties with the highest mean_value
top_n(10,mean_value)
# Filters the original data to only include top counties
filter_counties= clean_data|>
filter(Y1_COUNTYNAME.x %in% top2_counties$Y1_COUNTYNAME.x)
# Box plot for top counties
plot4 = ggplot(filter_counties, aes(x = reorder(Y1_COUNTYNAME.x, -LOG_MIGRATION), y = LOG_MIGRATION)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Box Plot of Migration for Top 10 Counties", x = "County", y = "Migration (Log Transformed") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(plot3, plot4, ncol = 2)
# By the State level
# Calculates mean LOG_VALUE(Housing prices) and mean LOG_MIGRATION(Migration) for each state
state_summary2 = clean_data |>
# Group data by state postal cod
group_by(STATEPOSTAL) |>
summarise(
mean_value = mean(LOG_VALUE, na.rm = TRUE),# Calculate mean of LOG_VALUE for each state
mean_inflow = mean(LOG_MIGRATION, na.rm = TRUE) # Calculate mean of LOG_MIGRATION for each state
)
#Taking the top 10 states for both Value and number of individuals inflow
# Filter for the top 10 states by mean VALUE and mean inflow
top_value_states = state_summary2 |>
# Arrange states in descending order of mean_value
arrange(desc(mean_value)) |>
# Select the first 10 rows (top 10 states)
slice(1:10)
top_inflow_states = state_summary2 |>
# Arrange states in descending order of mean_inflow
arrange(desc(mean_inflow)) |>
# Select the first 10 rows (top 10 states)
slice(1:10)
# Filters the original data to only include top counties
filtered_inflow_states= clean_data|>
filter(STATEPOSTAL %in% top_inflow_states$STATEPOSTAL) |>
group_by(STATEPOSTAL, YEAR) |>
summarise(mean_inflow_year = mean(`NO_OF_INDIVIDUALS(INFLOW)`))
# unique(filtered_inflow_states$STATEPOSTAL)
# Filters the original data to only include top counties
filtered_value_states= clean_data|>
filter(STATEPOSTAL %in% top_value_states$STATEPOSTAL) |>
group_by(STATEPOSTAL, YEAR) |>
summarise(mean_value_year = mean(VALUE))
# unique(filtered_inflow_states$STATEPOSTAL)
plot5 = ggplot(filtered_value_states, aes(x = YEAR, y = mean_value_year, group = STATEPOSTAL, color = STATEPOSTAL)) +
# Set color by county name to differentiate points by county
#Add points to represent LOG_MIGRATION at each YEAR
geom_point(size = 1.5) + geom_line(size = 1.2) +
scale_color_viridis_d(option = "viridis") + theme_minimal() +
labs(title = "Top 10 States for Housing Prices by Year", x = "YEAR", y = "Housing Prices", color = "State")
plot6 = ggplot(filtered_inflow_states, aes(x = YEAR, y = mean_inflow_year, group = STATEPOSTAL, color = STATEPOSTAL)) +
# Set color by county name to differentiate points by county
#Add points to represent LOG_MIGRATION at each YEAR
geom_point(size = 1.5) + geom_line(size = 1.2) +
scale_color_viridis_d(option = "viridis") + theme_minimal() +
labs(title = "Top 10 States for Migration by Year", x = "YEAR", y = "Migration", color = "State")
grid.arrange(plot5,plot6, ncol=2)
# Find the top 10 counties with the highest mean of housing prices
top_counties = clean_data |>
group_by(Y1_COUNTYNAME.x)|># Group data by county name
summarise(mean_value = mean(LOG_VALUE, na.rm = T))|> # # Calculate the mean of housing prices for each county, excluding NA values
arrange(desc(mean_value))|> # Arrange counties in descending order of mean_value
# Select the top 10 counties with the highest mean_value
top_n(10,mean_value)
# Filters the original data to only include top counties
filtered_counties= clean_data|>
filter(Y1_COUNTYNAME.x %in% top_counties$Y1_COUNTYNAME.x)
# Box plot for top counties
plot3 = ggplot(filtered_counties, aes(x = reorder(Y1_COUNTYNAME.x, -LOG_VALUE), y = LOG_VALUE)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Box Plot of Housing Prices for Top 10 Counties", x = "County", y = "Housing Prices (Log Transformed)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the top ten states based of mean of VALUE
# Find the top 10 counties with the highest mean of inflow (migration)
top2_counties = clean_data |>
group_by(Y1_COUNTYNAME.x)|># Group data by county name
summarise(mean_value = mean(LOG_MIGRATION, na.rm = T))|> # Calculate the mean of migration (inflow) for each county, excluding NA values
arrange(desc(mean_value))|> # Arrange counties in descending order of mean_value
#Select the top 10 counties with the highest mean_value
top_n(10,mean_value)
# Filters the original data to only include top counties
filter_counties= clean_data|>
filter(Y1_COUNTYNAME.x %in% top2_counties$Y1_COUNTYNAME.x)
# Box plot for top counties
plot4 = ggplot(filter_counties, aes(x = reorder(Y1_COUNTYNAME.x, -LOG_MIGRATION), y = LOG_MIGRATION)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Box Plot of Migration for Top 10 Counties", x = "County", y = "Migration (Log Transformed") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(plot3, plot4, ncol = 2)
# Find the top 10 counties with the highest mean of housing prices
top_counties = clean_data |>
group_by(Y1_COUNTYNAME.x)|># Group data by county name
summarise(mean_value = mean(LOG_VALUE, na.rm = T))|> # # Calculate the mean of housing prices for each county, excluding NA values
arrange(desc(mean_value))|> # Arrange counties in descending order of mean_value
# Select the top 10 counties with the highest mean_value
top_n(10,mean_value)
# Filters the original data to only include top counties
filtered_counties= clean_data|>
filter(Y1_COUNTYNAME.x %in% top_counties$Y1_COUNTYNAME.x)
# Box plot for top counties
plot3 = ggplot(filtered_counties, aes(x = reorder(Y1_COUNTYNAME.x, -LOG_VALUE), y = LOG_VALUE)) +
geom_boxplot(fill = "lightgreen") +
labs(title = "Box Plot of Housing Prices for Top 10 Counties", x = "County", y = "Housing Prices (Log Transformed)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot the top ten states based of mean of VALUE
# Find the top 10 counties with the highest mean of inflow (migration)
top2_counties = clean_data |>
group_by(Y1_COUNTYNAME.x)|># Group data by county name
summarise(mean_value = mean(LOG_MIGRATION, na.rm = T))|> # Calculate the mean of migration (inflow) for each county, excluding NA values
arrange(desc(mean_value))|> # Arrange counties in descending order of mean_value
#Select the top 10 counties with the highest mean_value
top_n(10,mean_value)
# Filters the original data to only include top counties
filter_counties= clean_data|>
filter(Y1_COUNTYNAME.x %in% top2_counties$Y1_COUNTYNAME.x)
# Box plot for top counties
plot4 = ggplot(filter_counties, aes(x = reorder(Y1_COUNTYNAME.x, -LOG_MIGRATION), y = LOG_MIGRATION)) +
geom_boxplot(fill = "lightblue") +
labs(title = "Box Plot of Migration for Top 10 Counties", x = "County", y = "Migration (Log Transformed") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(plot3, plot4, ncol = 2)
